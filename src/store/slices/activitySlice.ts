import { createSlice, PayloadAction } from "@reduxjs/toolkit";
import { RootState } from "../store";
import { STORAGE_KEYS } from "../../constants";
import { TelegramUserActivity } from "../../types/Telegram";

/**
 * Interface for the ActivityState object representing the state of the user activity
 */
export type ActivityState = {
  /**
   * Array of activity items
   */
  items: TelegramUserActivity[];
  /**
   * Array of filter keys
   */
  filters: string[];
  /**
   * Whether the activity is loading
   */
  loading: boolean;
  /**
   * Total number of activities
   */
  total: number;
  /**
   * Skip N activities
   */
  skip: number;
  /**
   * Array of mongodb query objects
   */
  find?: any[];
};

const initialState: ActivityState = {
  items: JSON.parse(localStorage.getItem(STORAGE_KEYS.ACTIVITY) || "[]"),
  filters: [],
  loading: true,
  total: JSON.parse(localStorage.getItem(STORAGE_KEYS.ACTIVITY) || "[]").length,
  skip: 0,
};

// Create a Redux slice for the app store with reducer functions
const activitySlice = createSlice({
  name: "activity",
  initialState,
  reducers: {
    /**
     * Reducer to set the activity state
     */
    setActivity(state, action: PayloadAction<any>) {
      state = {
        ...state,
        ...action.payload,
      };
    },
    /**
     * Reducer to set the activity items state
     */
    setActivityItems(state, action: PayloadAction<any[]>) {
      state.items = action.payload;
    },
    /**
     * Reducer to add the activity items to the state
     */
    addActivityItems(state, action: PayloadAction<any[]>) {
      state.items = [...state.items, ...action.payload];
    },
  },
});

//
/**
 * Selector function to access the activity state from the Redux store
 */
export const selectActivityStore = (state: RootState) => state.app.activity;

/**
 * Activity store actions generated by createSlice
 */
export const activityStoreActions = activitySlice.actions;

// Export the reducer function generated by createSlice
export default activitySlice.reducer;
